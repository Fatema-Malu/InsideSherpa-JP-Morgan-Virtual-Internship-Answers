From 57670dec111227b6613ca1908cff85c86272ad33 Mon Sep 17 00:00:00 2001
From: shubhransh gupta <gupta.subhransh@gmail.com>
Date: Wed, 17 Jun 2020 13:21:34 +0000
Subject: [PATCH] Create Patch file

---
 0001-Create-Patch-File.patch | 97 ++++++++++++++++++++++++++++++++++++
 1 file changed, 97 insertions(+)
 create mode 100644 0001-Create-Patch-File.patch

diff --git a/0001-Create-Patch-File.patch b/0001-Create-Patch-File.patch
new file mode 100644
index 0000000..de06ce6
--- /dev/null
+++ b/0001-Create-Patch-File.patch
@@ -0,0 +1,97 @@
+From 52658c4c36e1426c032a7624d39ea9c9048d6caa Mon Sep 17 00:00:00 2001
+From: shubhransh gupta <gupta.subhransh@gmail.com>
+Date: Wed, 17 Jun 2020 13:19:16 +0000
+Subject: [PATCH] Create Patch File
+
+---
+ client3.py     | 32 +++-----------------------------
+ client_test.py |  4 ++--
+ 2 files changed, 5 insertions(+), 31 deletions(-)
+
+diff --git a/client3.py b/client3.py
+index ad3b248..17978b6 100644
+--- a/client3.py
++++ b/client3.py
+@@ -1,23 +1,3 @@
+-################################################################################
+-#
+-#  Permission is hereby granted, free of charge, to any person obtaining a
+-#  copy of this software and associated documentation files (the "Software"),
+-#  to deal in the Software without restriction, including without limitation
+-#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
+-#  and/or sell copies of the Software, and to permit persons to whom the
+-#  Software is furnished to do so, subject to the following conditions:
+-#
+-#  The above copyright notice and this permission notice shall be included in
+-#  all copies or substantial portions of the Software.
+-#
+-#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+-#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+-#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+-#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+-#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+-#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+-#  DEALINGS IN THE SOFTWARE.
+-
+ import urllib.request
+ import time
+ import json
+@@ -30,8 +10,6 @@ QUERY = "http://localhost:8080/query?id={}"
+ N = 500
+ 
+ def getDataPoint(quote):
+-	""" Produce all of the needed values to generate a datapoint """
+-	""" ------------- Update this function ------------- """
+ 	stock = quote['stock']
+ 	bid_price = float(quote['top_bid']['price'])
+ 	ask_price = float(quote['top_ask']['price'])
+@@ -39,9 +17,6 @@ def getDataPoint(quote):
+ 	return stock, bid_price, ask_price, price
+ 
+ def getRatio(price_a, price_b):
+-	""" Get ratio of price_a and price_b """
+-	""" ------------- Update this function ------------- """
+-	""" Also create some unit tests for this function in client_test.py """
+ 	if(price_b==0):
+ 		return
+ 	return price_a/price_b
+@@ -52,11 +27,10 @@ if __name__ == "__main__":
+ 	# Query the price once every N seconds.
+ 	for _ in range(N):
+  		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+- 		prices = dict()
++ 		prices =dict()
+  		for quote in quotes:
+  			stock, bid_price, ask_price, price = getDataPoint(quote)
+-			prices[stock] = price
++			prices['stock'] = price
+  			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+  
+--	#	print ("Ratio %s" % getRatio(price, price))
+-+		print ("Ratio %s" % getRatio(prices['ABC'], prices['DEF']))
++		print ("Ratio %s" % getRatio(prices['ABC'], prices['DEF']))
+diff --git a/client_test.py b/client_test.py
+index d716049..6d55b8a 100644
+--- a/client_test.py
++++ b/client_test.py
+@@ -11,7 +11,7 @@ class ClientTest(unittest.TestCase):
+     ]
+     """ ------------ Add the assertion below ------------ """
+     for quote in quotes:
+-+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
++      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
+   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+     quotes = [
+       {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+@@ -19,7 +19,7 @@ class ClientTest(unittest.TestCase):
+     ]
+     """ ------------ Add the assertion below ------------ """
+     for quote in quotes:
+-+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
++      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
+ 
+   """ ------------ Add more unit tests ------------ """
+ 
+-- 
+2.17.1
+
-- 
2.17.1

